# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

AWSTemplateFormatVersion: '2010-09-09'
Description: >-
    Provision CSV Manager for Security Hub Export Lambda, Event, and Automation.
Parameters: 
  Frequency:
    Type: String
    Description: A cron or rate expression for how often the export occurs
    Default: "cron(0 8 ? * SUN *)"
  Filters:
    Type: String
    Description: >-
        Canned filter name (HighActive is the only choice currently)
        or a JSON filter for GetFindings
    Default: "HighActive"
  CodeArchive:
    Type: String
    Description: The code archive S3 key returned by csvPrepare.py
    Default: "zip/lambda.zip"
  PrimaryRegion:
    Type: String
    Description: "The region in which the S3 bucket and SSM parameters are stored"
    Default: ""
Mappings:
  PartitionMap:
    aws:
      principals:
      - lambda.amazonaws.com
      - ec2.amazonaws.com
      - ssm.amazonaws.com
    aws-us-gov:
      principals:
      - ec2.amazonaws.com
      - lambda.amazonaws.com
      - ssm.amazonaws.com
Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      Description: "Allow Lambda, EC2, and SSM to carry out necessary operations"
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: !FindInMap [ PartitionMap, !Ref AWS::Partition, "principals" ]
          Action: sts:AssumeRole
      Policies:
        - PolicyName: CsvManagerForSecurityHub
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: Iam
              Effect: Allow
              Action:
              - iam:GetRole
              - iam:PassRole
              - iam:CreateServiceLinkedRole
              Resource: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*"
            - Sid: Sts
              Effect: Allow
              Action:
              - sts:AssumeRole
              - sts:GetCallerIdentity
              Resource: "*"
            - Sid: S3
              Effect: Allow
              Action:
              - s3:PutObject
              - s3:GetObject
              Resource: 
              - !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/csvManager/bucket}}"
              - !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/csvManager/bucket}}/*"
            - Sid: SecurityHub
              Effect: Allow
              Action:
              - securityhub:GetFindings
              - securityhub:BatchUpdateFindings
              Resource: "*"
            - Sid: Lambda
              Effect: Allow
              Action:
              - lambda:InvokeFunction
              Resource: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-${AWS::AccountId}"
            - Sid: Ssm
              Effect: Allow
              Action:
              - ssm:PutParameter
              - ssm:GetParameters
              Resource: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/csvManager/*"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  Lambda:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub "${AWS::StackName}-${AWS::AccountId}"
      Code: 
        S3Bucket: "{{resolve:ssm:/csvManager/bucket}}"
        S3Key: !Ref CodeArchive
      Description: "Export SecurityHub findings to CSV in S3 bucket"
      Handler: csvExporter.lambdaHandler
      MemorySize: 512
      Role: !GetAtt Role.Arn
      Runtime: "python3.9"
      Timeout: 900
      Tags:
      - Key: CodeArchiveKey
        Value: !Ref CodeArchive
      Environment:
        Variables:
          CSV_PRIMARY_REGION: !Ref PrimaryRegion
  LambdaRule:
    Type: AWS::Events::Rule
    Properties:
        Description: "Invoke Security Hub findings exporter periodically"
        ScheduleExpression: !Ref Frequency
        State: ENABLED
        Targets: 
        -   Arn: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-${AWS::AccountId}"
            Id: "CsvTarget"
            InputTransformer:
                InputPathsMap: {"event":"$"}
                InputTemplate: "{ \"event\": <event>}"
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Sub "${AWS::StackName}-${AWS::AccountId}"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaRule.Arn
  LambdaAutomation:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: "Automation"
      Content:
        description: |-
          # Generate a Security Hub Findings Export (CSV Manager for Security Hub)
          This Systems Manager (SSM) Automation allows you to generate a 
          CSV Manager for Security Hub export outside the normal export schedule. 
        schemaVersion: '0.3'
        assumeRole: !GetAtt Role.Arn
        parameters:
          Filters:
            type: String
            default: HighActive
            description: >-
                The canned filter "HighActive" or a JSON-formatted string
                representing a Security Hub GetFindings API "filter" object
          Partition:
            type: String
            default: !Ref "AWS::Partition"
            description: The partition in which CSV Manager for Security Hub will operate
          Regions:
            type: String
            default: !Sub "{{resolve:ssm:/csvManager/regionList}}"
            description: >- 
                The comma-separated list of regions in which CSV Manager for Security Hub
                will operate
        mainSteps:
        - name: InvokeLambda
          action: 'aws:invokeLambdaFunction'
          inputs:
            InvocationType: RequestResponse
            FunctionName: !GetAtt Lambda.Arn
            Payload: '{ "filters" : "{{Filters}}" , "partition" : "{{Partition}}", "regions" : "[ {{Regions}} ]"}'
          description: Invoke the CSV Manager for Security Hub lambda function
          outputs:
          - Name: resultCode
            Selector: $.Payload.resultCode
            Type: Integer
          - Name: bucket
            Selector: $.Payload.bucket
            Type: String
          - Name: exportKey
            Selector: $.Payload.exportKey
            Type: String
          isEnd: true
