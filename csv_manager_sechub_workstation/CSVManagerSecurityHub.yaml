# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

AWSTemplateFormatVersion: '2010-09-09'
Description: Create a bucket to receive Security Hub findings, Provision CSVExporter Lambda, CSVUpdater Lambda, Event and Automation
Parameters: 
  CodeFolder:
    Type: String
    Description: Folder that will contain Lambda code
    Default: "code"
  FindingsFolder:
    Type: String
    Description: Folder that will contain exported Security Hub findings
    Default: "findings"
  Regions:
    Type: String
    Description: "The comma-delimeted list of regions in which CSV Manager For Security Hub will operate"
    Default: ""
  Frequency:
    Type: String
    Description: A cron or rate expression for how often the export occurs
    Default: "cron(0 8 ? * SUN *)"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "CSV Manager For Security Hub Findings Datastore Details"
        Parameters:
        - CodeFolder
        - FindingsFolder
      - Label:
          default: "CSV Manager For Security Hub Operating Environment"
        Parameters:
        - Region
    ParameterLabels:
        CodeFolder:
          default: "What folder for CSV Manager For Security Hub lambda code?"
        FindingsFolder:
          default: "What folder for CSV Manager For Security Hub exports?"
        Regions:
          default: "In what comma-separated list of regions will CSV Manager For Security Hub operate?"
Resources:  
  Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      ObjectLockEnabled: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      AccessControl: BucketOwnerFullControl
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  BucketNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: The S3 bucket where Security Hub are exported
      Name: !Sub "/csvManager/bucket"
      Type: String
      Value: !Ref Bucket
  CodeFolderParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: The folder where CSV Manager For Security Hub code is stored
      Name: !Sub "/csvManager/folder/code"
      Type: String
      Value: !Ref CodeFolder
  FindingsFolderParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: The folder where CSV Manager For Security Hub findings are exported
      Name: !Sub "/csvManager/folder/findings"
      Type: String
      Value: !Ref FindingsFolder
  ArchiveKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: The name of the ZIP archive containing CSV Manager For Security Hub Lambda code
      Name: !Sub "/csvManager/object/codeArchive"
      Type: String
      Value: !Sub "zip/lambda.zip"
  RegionParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/csvManager/regionList"
      Description: The list of regions in which CSV Manager For Security Hub will operate
      Type: StringList
      Value: !Ref Regions
# BEGIN Testing the copy code for zip files
  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'Bucket'
      SourceBucket: 'csvmanagersecurityhub'
      Prefix: 'zip/'
      Objects:
        - lambda.zip
  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::csvmanagersecurityhub/zip/*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:aws:s3:::${Bucket}/zip/*'
  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print(('copy_source: %s' % copy_source))
                  print(('dest_bucket = %s'%dest_bucket))
                  print(('key = %s' %key))
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print(('Received event: %s' % json.dumps(event)))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
# END Testing the copy code for zip files
  ExporterStack:
    DependsOn: CopyZips
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://csvmanagersecurityhub.s3.eu-west-1.amazonaws.com/CsvExporter.yaml
      Parameters:
        PrimaryRegion: !Ref "AWS::Region"
        Frequency: !Ref Frequency
  ImporterStack:
    DependsOn: CopyZips
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://csvmanagersecurityhub.s3.eu-west-1.amazonaws.com/CsvUpdater.yaml      
      Parameters:
        PrimaryRegion: !Ref "AWS::Region"
Outputs:
  BucketArn:
    Description: ARN of the bucket we wish to use
    Value: !GetAtt Bucket.Arn
    Export:
      Name: "Hx::BucketArn"
  BucketName:
    Description: The bucket name created by this stack
    Value: !Ref Bucket
    Export:
      Name: "Hx::BucketName"
  CodeFolderParameterName:
    Description: The name of the CodeFolder SSM parameter
    Value: !Ref CodeFolderParameter
    Export:
      Name: "Hx::CodeFolderParameterName"
  FindingsFolderParameterName:
    Description: The name of the CodeFolder SSM parameter
    Value: !Ref CodeFolderParameter
    Export:
      Name: "Hx::FindingFolderParameterName"
  ArchiveKeyParameterName:
    Description: The code ZIP file object key
    Value: !Ref ArchiveKeyParameter
    Export:
      Name: "Hx::ArchiveKeyParameterName"



